generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model VocabEntry {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  note                        String   @default("")
  sentence                    String   @unique
  sentencePlusPhoneticSymbols String   @map("sentence_plus_phonetic_symbols")
  translation                 String
  userId                      String   @map("user_id") @db.ObjectId
  user                        User     @relation(fields: [userId], references: [id])
  updatedAt                   DateTime @updatedAt @map("updated_at")
  createdAt                   DateTime @default(now()) @map("created_at")

  @@map("vocab_entry")
}

// https://authjs.dev/getting-started/adapters/prisma#naming-conventions

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  VocabEntry VocabEntry[]

  @@map("user")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("varification_token")
}
